generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Expertise {
  id          String                @id @default(uuid())
  name        String                @unique
  instructors InstructorExpertise[]
}

model InstructorExpertise {
  id           String            @id @default(uuid())
  instructorId String
  expertiseId  String
  expertise    Expertise         @relation(fields: [expertiseId], references: [id])
  instructor   InstructorProfile @relation(fields: [instructorId], references: [id])
}

model User {
  id                String             @id @default(uuid())
  name              String
  email             String             @unique
  password          String
  role              Role               @default(ADMIN)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  lastLogin         DateTime?
  status            String             @default("ACTIVE")
  adminProfile      AdminProfile?
  coursesTaught     Course[]           @relation("InstructorCourses")
  instructorProfile InstructorProfile?
  studentProfile    StudentProfile?
  StudentApplication StudentApplication[]
}

model StudentProfile {
  id     String  @id @default(uuid())
  userId String  @unique
  grade  String?
  user   User    @relation(fields: [userId], references: [id])
}

model InstructorProfile {
  id                  String                @id @default(uuid())
  userId              String                @unique
  bio                 String?
  phone               String?
  rating              Float?
  status              InstructorStatus      @default(ACTIVE)
  students            Int?
  yearsOfExperience   Int?
  instructorExpertise InstructorExpertise[]
  user                User                  @relation(fields: [userId], references: [id])
}

model AdminProfile {
  id         String @id @default(uuid())
  userId     String @unique
  adminLevel Int?
  user       User   @relation(fields: [userId], references: [id])
}

model Category {
  id          String         @id @default(uuid())
  name        String
  description String
  status      CategoryStatus @default(ACTIVE)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  courses     Course[]
}

model Course {
  id                  String            @id @default(uuid())
  title               String
  shortDescription    String
  detailedDescription String
  imageUrl            String?
  priceOriginal       Float
  priceDiscounted     Float
  status              CourseStatus      @default(DRAFT)
  level               CourseLevel
  duration            String
  categoryId          String
  instructorId        String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  category            Category          @relation(fields: [categoryId], references: [id])
  instructor          User              @relation("InstructorCourses", fields: [instructorId], references: [id])
  modules             CourseModule[]
  learningOutcomes    LearningOutcome[]
  prerequisites       Prerequisite[]
  StudentApplication  StudentApplication[]
}

model CourseModule {
  id       String         @id @default(uuid())
  courseId String
  title    String
  duration String
  order    Int
  lessons  CourseLesson[]
  course   Course         @relation(fields: [courseId], references: [id])
}

model CourseLesson {
  id       String       @id @default(uuid())
  moduleId String
  title    String
  duration String
  order    Int
  module   CourseModule @relation(fields: [moduleId], references: [id])
}

model LearningOutcome {
  id       String @id @default(uuid())
  courseId String
  text     String
  course   Course @relation(fields: [courseId], references: [id])
}

model Prerequisite {
  id       String @id @default(uuid())
  courseId String
  text     String
  course   Course @relation(fields: [courseId], references: [id])
}

model StudentApplication {
  id               String            @id @default(uuid())
  studentId        String?
  student          User?              @relation(fields: [studentId], references: [id])
  courseId         String
  course           Course            @relation(fields: [courseId], references: [id])
  paymentMethod    String
  paymentReference String
  status           ApplicationStatus @default(PENDING)
  submittedAt      DateTime          @default(now())
  reviewedAt       DateTime?
  reviewedBy       String? // Admin
  adminNotes       String?
  marketingSource  String?

  // Personal details
  fullName       String
  dateOfBirth    DateTime
  gender         String
  nationality    String? // newly added
  university     String?
  email          String
  phone          String
  telegramHandle String?
  address        String? // now optional

  // Receipt handling
  receiptUrl      String?
  receiptVerified Boolean @default(false)

  paymentOption   String? // newly added

  @@index([studentId])
  @@index([courseId])
}

model ContactMessage {
  id        String   @id @default(uuid())
  name      String
  email     String
  phone     String
  message   String
  status    String   @default("new") // new, read, replied
  createdAt DateTime @default(now())
}

model PlatformSettings {
  id          String   @id @default(uuid())
  siteName    String   @default("SkillBridge")
  contactEmail String  @default("contact@skillbridge.com")
  siteDescription String @default("Bridging Gaps, Building Skills, Transforming Futures")
  contactPhone String  @default("+251 2345 4365")
  address     String   @default("123 Education Street, Learning City")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model EmailSettings {
  id          String   @id @default(uuid())
  smtpHost    String   @default("smtp.gmail.com")
  smtpPort    Int      @default(587)
  smtpUsername String  @default("admin@edutech.com")
  smtpPassword String  @default("")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SecuritySettings {
  id                    String   @id @default(uuid())
  allowUserRegistration Boolean  @default(true)
  requireEmailVerification Boolean @default(true)
  enableNotifications   Boolean  @default(true)
  maintenanceMode      Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model SocialSettings {
  id          String   @id @default(uuid())
  facebookUrl String?  @default("https://facebook.com/yourpage")
  twitterUrl  String?  @default("https://twitter.com/yourhandle")
  linkedinUrl String?  @default("https://linkedin.com/company/yourcompany")
  instagramUrl String? @default("https://instagram.com/yourhandle")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AdvancedSettings {
  id                String   @id @default(uuid())
  debugMode         Boolean  @default(false)
  logLevel          String   @default("info")
  cacheEnabled      Boolean  @default(true)
  maxUploadSize     Int      @default(5242880) // 5MB in bytes
  sessionTimeout    Int      @default(3600) // 1 hour in seconds
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum Role {
  ADMIN
  SUPER_ADMIN
  INSTRUCTOR
  STUDENT
  SUPPORT
}

enum CategoryStatus {
  ACTIVE
  INACTIVE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  ALL_LEVELS
}

enum InstructorStatus {
  ACTIVE
  INACTIVE
}

enum PaymentMethod {
  TELEBIRR
  CBE
  AMOLE
  OTHER
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationType {
  NEW_APPLICATION
  NEW_STUDENT
  NEW_COURSE
  NEW_INSTRUCTOR
  APPLICATION_APPROVED
  APPLICATION_REJECTED
}
