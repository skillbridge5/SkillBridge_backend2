// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SUPER_ADMIN
  INSTRUCTOR
  STUDENT
  SUPPORT // added support role
}

enum CategoryStatus {
  ACTIVE
  INACTIVE
}

enum CourseStatus {
  DRAFT
  PUBLISHED
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  ALL_LEVELS
}

enum InstructorStatus {
  ACTIVE
  INACTIVE
}

model Expertise {
  id          String                 @id @default(uuid())
  name        String                 @unique
  instructors InstructorExpertise[]
}

model InstructorExpertise {
  id             String             @id @default(uuid())
  instructorId   String
  expertiseId    String
  instructor     InstructorProfile  @relation(fields: [instructorId], references: [id])
  expertise      Expertise          @relation(fields: [expertiseId], references: [id])
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(ADMIN)
  status    String   @default("ACTIVE") // added for user status
  lastLogin DateTime? // added for last login timestamp
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  studentProfile    StudentProfile?
  instructorProfile InstructorProfile?
  adminProfile      AdminProfile?
  coursesTaught    Course[] @relation("InstructorCourses")
}

model StudentProfile {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  grade     String?
  // Add more student-specific fields here
}

model InstructorProfile {
  id                  String                 @id @default(uuid())
  user                User                   @relation(fields: [userId], references: [id])
  userId              String                 @unique
  phone               String?
  yearsOfExperience   Int?
  bio                 String?
  status              InstructorStatus       @default(ACTIVE)
  rating              Float?                 // average rating
  students            Int?                   // total students
  instructorExpertise InstructorExpertise[]  // relation to expertise
}

model AdminProfile {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  adminLevel Int?
  // Add more admin-specific fields here
}

model Category {
  id          String         @id @default(uuid())
  name        String
  description String
  status      CategoryStatus @default(ACTIVE)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  courses     Course[]
}

model Course {
  id                String         @id @default(uuid())
  title             String
  shortDescription  String
  detailedDescription String
  imageUrl          String?
  priceOriginal     Float
  priceDiscounted   Float
  status            CourseStatus   @default(DRAFT)
  level             CourseLevel
  duration          String
  categoryId        String
  category          Category       @relation(fields: [categoryId], references: [id])
  instructorId      String
  instructor        User           @relation("InstructorCourses", fields: [instructorId], references: [id])
  modules           CourseModule[]
  learningOutcomes  LearningOutcome[]
  prerequisites     Prerequisite[]
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

model CourseModule {
  id        String       @id @default(uuid())
  courseId  String
  course    Course       @relation(fields: [courseId], references: [id])
  title     String
  duration  String
  order     Int
  lessons   CourseLesson[]
}

model CourseLesson {
  id        String       @id @default(uuid())
  moduleId  String
  module    CourseModule @relation(fields: [moduleId], references: [id])
  title     String
  duration  String
  order     Int
}

model LearningOutcome {
  id        String   @id @default(uuid())
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  text      String
}

model Prerequisite {
  id        String   @id @default(uuid())
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  text      String
}
